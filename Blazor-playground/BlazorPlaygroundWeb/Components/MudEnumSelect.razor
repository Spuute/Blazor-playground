@using BlazorPlaygroundWeb.Enums
@typeparam TEnum

<MudSelect T="TEnum" Label="välj " @onchange="OnSelectedChanged">
    @foreach (var enumValue in Enum.GetValues(typeof(TEnum)).Cast<TEnum>().Where(e => !e.Equals(default(TEnum))))
    {
        <MudSelectItem Value="enumValue">@GetTranslation(enumValue)</MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public TEnum? SelectedEnum { get; set; }
    [Parameter] public EventCallback<TEnum> SelectedEnumChanged { get; set; }

    private async Task OnSelectedChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TEnum), e.Value!.ToString(), out var selectedValue))
        {
            SelectedEnum = (TEnum?)selectedValue;
            await SelectedEnumChanged.InvokeAsync(SelectedEnum);
        }
    }

    private static string SeasonTranslation(Season? season) =>
        season switch
        {
            Season.Autumn => "Höst",
            Season.Spring => "Vår",
            Season.Summer => "Sommar",
            Season.Winter => "Vinter"
        };

    private static string CategoryTranslation(Category? category) =>
        category switch
        {
            Category.Appetizer => "Förrätt",
            Category.Dessert => "Efterätt",
            Category.MainCourse => "Huvudrätt"
        };


    private string GetTranslation(TEnum enumValue)
    {
        return enumValue switch
        {
            Season season => SeasonTranslation(season),
            Category category => CategoryTranslation(category)
        };
    }

}