@using BlazorPlaygroundWeb.Enums
@typeparam TEnum where TEnum : struct, Enum 

<label for="test"></label>
<select class="form-select" id="test" @onchange="OnSelectChanged">
    <option selected>-- Select a value --</option>
    @foreach (var enumValue in Enum.GetValues(typeof(TEnum)).Cast<TEnum>().Where(e => !e.Equals(default(TEnum))))
    {
        <option value="@enumValue">@GetTranslation(enumValue)</option>
    }
</select>

@code {
    [Parameter] public TEnum? SelectedEnum { get; set; }
    [Parameter] public EventCallback<TEnum> SelectedEnumChanged { get; set; }

    private async Task OnSelectChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TEnum), e.Value.ToString(), out var selectedValue))
        {
            SelectedEnum = (TEnum?)selectedValue;
            await SelectedEnumChanged.InvokeAsync(SelectedEnum);
        }
    }

    private static string SeasonTranslation(Season? season) =>
        season switch
        {
            Season.Autumn => "Höst",
            Season.Spring => "Vår",
            Season.Summer => "Sommar",
            Season.Winter => "Vinter",
            null => "",
            _ => "Finns ej"
        };

    private static string CategoryTranslation(Category? category) =>
        category switch
        {
            Category.Appetizer => "Förrätt",
            Category.Dessert => "Efterätt",
            Category.MainCourse => "Huvudrätt",
            null => "",
            _ => "Finns ej"
        };


    private string GetTranslation(TEnum enumValue)
    {
        return enumValue switch
        {
            Season season => SeasonTranslation(season),
            Category category => CategoryTranslation(category)
        };
    }
}